@using Core.Entities
@inject NavigationManager NavigationManager

<div class="card h-100 shadow-sm">
    <div class="position-relative">
        <img src="@Product.ImageUrl"
             alt="@Product.Name"
             class="card-img-top img-fluid product-image">
        @if (Product.Quantity <= 5)
        {
            <span class="badge badge-danger position-absolute" style="top: 10px; right: 10px;">
                Low Stock
            </span>
        }
        @* Optional "New" badge *@
        @if (Product.IsNew)
        {
            <span class="badge badge-success position-absolute" style="top: 10px; left: 10px;">
                New
            </span>
        }
    </div>
    <div class="card-body d-flex flex-column">
        <h5 class="card-title">@Truncate(Product.Name, 30)</h5>
        <p class="card-text text-muted mb-2">
            @Truncate(Product.Description, 60)
        </p>
        <ul class="list-unstyled mb-3">
            <li><strong>Manufacturer:</strong> @Product.Manufacturer</li>
            <li><strong>Category:</strong> @Product.Category</li>
            <li><strong>Color:</strong> @Product.Color</li>
            <li><strong>Weight:</strong> @Product.Weight kg</li>
            <li><strong>In Stock:</strong> @Product.Quantity</li>
        </ul>
        <div class="mt-auto">
            <h5 class="text-primary mb-3">${@Product.Price:F2}</h5>
            <div class="d-flex justify-content-between">
                <button @onclick="() => ViewProduct(Product.Id)"
                        class="btn btn-outline-secondary btn-sm d-flex align-items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="mr-2" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                        <path d="M8 3.5a4.5 4.5 0 100 9 4.5 4.5 0 000-9zM2.343 8a5.657 5.657 0 1110.314 0A5.657 5.657 0 012.343 8z" />
                        <path d="M8 0a8 8 0 100 16A8 8 0 000 8a8 8 0 008-8zm0 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13z" />
                    </svg>
                    View
                </button>
                <button @onclick="() => AddToCart(Product)"
                        disabled="@(Product.Quantity <= 0)"
                        class="btn @(Product.Quantity > 0 ? "btn-primary" : "btn-secondary") btn-sm d-flex align-items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="mr-2" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                        <path d="M0 1.5A.5.5 0 01.5 1h1a.5.5 0 01.485.379L2.89 5H14.5a.5.5 0 01.49.598l-1.5 6A.5.5 0 0113 12H4a.5.5 0 01-.491-.408L1.01 2H.5a.5.5 0 01-.5-.5zM3.102 5l1.313 5h8.17l1.313-5H3.102zM5 13a1 1 0 100 2 1 1 0 000-2zm6 1a1 1 0 11-2 0 1 1 0 012 0z" />
                    </svg>
                    @(Product.Quantity > 0 ? "Add to Cart" : "Out of Stock")
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Product Product { get; set; }

    private void ViewProduct(int productId)
    {
        NavigationManager.NavigateTo($"/product/{productId}");
    }

    private void AddToCart(Product product)
    {
        // Implement your AddToCart logic here, e.g., call a service
        // For demonstration, we'll navigate to a cart add URL
        NavigationManager.NavigateTo($"/cart/add/{product.Id}");
    }

    private string Truncate(string? input, int maxLength)
    {
        if (string.IsNullOrEmpty(input))
            return string.Empty;

        return input.Length > maxLength ? input.Substring(0, maxLength) + "..." : input;
    }
}