<!-- Shared/SearchBar.razor -->
@using System.Collections.Generic
@using System.Threading.Tasks
@using System.Timers
@implements IDisposable

<div class="row mb-4">
    <div class="col-md-6 mb-3">
        <input type="text"
               @bind="SearchTerm"
               @bind:event="oninput"
               placeholder="Search products..."
               class="form-control form-control-lg" />
    </div>
    <div class="col-md-3 mb-3">
        <select @bind="SelectedCategory"
                class="form-control form-control-lg">
            <option value="">All Categories</option>
            @foreach (var category in Categories)
            {
                <option value="@category">@category</option>
            }
        </select>
    </div>
</div>

@code {
    private string searchTerm = string.Empty;
    private string selectedCategory = string.Empty;
    private Timer? debounceTimer;
    private readonly int debounceDelay = 100; // milliseconds

    [Parameter]
    public string SearchTerm
    {
        get => searchTerm;
        set
        {
            if (searchTerm != value)
            {
                searchTerm = value;
                ResetDebounceTimer();
            }
        }
    }

    [Parameter]
    public string SelectedCategory
    {
        get => selectedCategory;
        set
        {
            if (selectedCategory != value)
            {
                selectedCategory = value;
                ResetDebounceTimer();
            }
        }
    }

    [Parameter]
    public List<string> Categories { get; set; } = new();

    [Parameter]
    public EventCallback<(string searchTerm, string selectedCategory)> OnSearch { get; set; }

    /// <summary>
    /// Resets the debounce timer whenever the search term or category changes.
    /// </summary>
    private void ResetDebounceTimer()
    {
        debounceTimer?.Stop();
        debounceTimer?.Dispose();

        debounceTimer = new Timer(debounceDelay);
        debounceTimer.Elapsed += async (sender, args) =>
        {
            debounceTimer.Stop();
            debounceTimer.Dispose();
            await InvokeSearch();
            InvokeAsync(StateHasChanged);
        };
        debounceTimer.Start();
    }

    /// <summary>
    /// Invokes the search callback with the current search parameters.
    /// </summary>
    private async Task InvokeSearch()
    {
        if (OnSearch.HasDelegate)
        {
            await OnSearch.InvokeAsync((SearchTerm, SelectedCategory));
        }
    }

    /// <summary>
    /// Ensures the timer is disposed of when the component is destroyed.
    /// </summary>
    public void Dispose()
    {
        debounceTimer?.Stop();
        debounceTimer?.Dispose();
    }
}
